#ifndef CALCULATOR_H_INCLUDED
#define CALCULATOR_H_INCLUDE
#include <fstream>
#include <stdlib.h>
#include<iostream>
#include <sstream>



class Calculator
{
public:

    struct Data
    {
        double currentResult;
        char op;
        double argument;

        Data(double _result = 0, char _op = ' ', double _argument = 0)
            : currentResult(_result), op(_op), argument(_argument)
        {}

        void print(std::ostream& os = std::cout) const
        {
            os << op << ' '<< argument;
            os << std::endl;
        }
    };

    using I = LinkedListIterator<Data>;
    I it;

    Calculator()
    {

        std::cout<<"WELCOME TO OUR CALCULATOR!"<<std::endl<<std::endl<<
                 "Here is a little cheat sheet of the commands you are allowed to use and what they do:"<<std::endl<<std::endl<<
                 "getValue - returns the current result from the arithmetic operations"<<std::endl<<
                 "<arithmetic operation> <number> - applies the corresponding arithmetic operation (+, -, *, /) to the current result and the number and changes the value of the current result"<<std::endl<<
                 "listOperations - prints a list with all of the arithmetic  operations we have done so far in the right order"<<std::endl<<
                 "undo - cancels the previous arithmetic operation, changing the current result"<<std::endl<<
                 "reset - resets the calculator state. After it, the UNDO operation has no effect"<<std::endl<<
                 "save <file name> - saves in an appropriate format the series of currently performed arithmetic operations in a file with the specified name"<<std::endl<<
                 "restore <file name> - restores the status of the calculator from a specified file generated by the SAVE command. The current result after restore must matches the executed arithmetic actions from the file"<<std::endl<<
                 "OFF - turns off the calculator"<<std::endl<<
                 "------------------------------------------------------------------------------------------------------------------------"<<std::endl;
        performance();
    }


    void performance()
    {
        std::string input, operation, other;

        std::getline(std::cin, input);
        getValues(input, operation, other);
        while(input != "OFF")
        {


            if(operation == "getValue")
            {
                std::cout<<getValue()<<std::endl;
            }
            else if(operation == "listOperations")
            {
                listOperations();
            }
            else if(operation == "undo")
            {
                undo();
            }
            else if(operation == "reset")
            {
                reset();
            }
            else if(operation == "save")
            {
                save(other);
            }
            else if(operation == "restore")
            {
                restore(other);
            }
            else
            {
                int number = atoi(other.c_str());
                applyOperation(operation.at(0), number);
            }
            std::getline(std::cin, input);
            getValues(input, operation, other);

        }

    }

    void getValues(std::string input, std::string& operation, std::string& other)
    {
        std::istringstream exprs(input);
        std::ostringstream getOp;
        std::ostringstream getOther;
        char devider = ' ';
        char c;
        int flag = 0;
        while (exprs.get(c))
        {
            if( c!=devider && flag == 0)
                getOp << c;
            else if(c == devider)
                flag =1;
            else
            {
                getOther<<c;
            }


        }
        operation.assign(getOp.str());
        if(flag == 0) other = "";
        else
            other.assign(getOther.str());
    }

    void sum(double arg)
    {
        result+=arg;
    }

    void substract(double arg)
    {
        result-=arg;
    }

    void multiply(double arg)
    {
        result*=arg;
    }

    void divide(double arg)
    {
        result/=arg;
    }



    void applyOperation(char op, double arg)
    {
        switch (op)
        {
        case '+' :
            sum(arg);
            break;
        case '-' :
            substract(arg);
            break;
        case '*' :
            multiply(arg);
            break;
        case '/' :
            divide(arg);
            break;
        }
        Data data(result, op, arg);
        calculations.insertEnd(data);


    }


    void listOperations(std::ostream& os = std::cout)
    {

        for(it = calculations.begin(); it; ++it)
        {
            calculations.getAt(it).print(os);
        }
    }


    double getValue()
    {
        return result;
    }



    void undo()
    {
        if(!calculations.empty())
        {
            Data temp;
            calculations.deleteEnd(temp);
            result = calculations.getAt(calculations.end()).currentResult;
        }


    }

    void reset()
    {
        calculations.clean();
        result = 0;
    }


    void save(std::string file)
    {
        std::ofstream myfile;
        myfile.open (file);
        listOperations(myfile);
        myfile.close();

    }

    void restore(std::string file)
    {
        reset();
        std::ifstream myfile (file);
        std::string line, operation;
        int argument;
        while(getline (myfile,line))
        {


            std::stringstream ss(line);
            std::getline(ss, operation, ' ');
            ss >> argument;
            applyOperation(operation.c_str()[0],argument);

        }
    }





private:
    double result = 0;
    LinkedList<Data> calculations;

};



#endif // CALCULATOR_H_INCLUDED
